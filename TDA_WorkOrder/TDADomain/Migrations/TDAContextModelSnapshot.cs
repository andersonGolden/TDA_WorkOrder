// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TDADomain.Data;

namespace TDADomain.Migrations
{
    [DbContext(typeof(TDAContext))]
    partial class TDAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TDADomain.DataObjects.Agbada", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Head")
                        .HasColumnType("float");

                    b.Property<double>("L")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("W")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Agbada");
                });

            modelBuilder.Entity("TDADomain.DataObjects.ChestPocket", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ChestPocket");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Cuffs", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Cuffs");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Customer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Description", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("BackDetailing")
                        .HasColumnType("int");

                    b.Property<long>("ChestPocketId")
                        .HasColumnType("bigint");

                    b.Property<long>("CuffId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CuffsID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmbroideryId")
                        .HasColumnType("bigint");

                    b.Property<long>("FlapId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("int");

                    b.Property<long>("NeckId")
                        .HasColumnType("bigint");

                    b.Property<int>("SidePocket")
                        .HasColumnType("int");

                    b.Property<long>("SleeveId")
                        .HasColumnType("bigint");

                    b.Property<long>("StyleId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrousersId")
                        .HasColumnType("bigint");

                    b.Property<int>("Underlay")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChestPocketId");

                    b.HasIndex("CuffsID");

                    b.HasIndex("EmbroideryId");

                    b.HasIndex("FlapId");

                    b.HasIndex("NeckId");

                    b.HasIndex("SleeveId");

                    b.HasIndex("StyleId");

                    b.HasIndex("TrousersId");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Embroidery", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Embroidery");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Flap", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Flap");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Measurement", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AgbadaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("TopId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrouserId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("AgbadaId");

                    b.HasIndex("TopId");

                    b.HasIndex("TrouserId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Neck", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Neck");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Sleeve", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sleeve");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Style", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Style");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Top", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double>("Back")
                        .HasColumnType("float");

                    b.Property<double>("Chest")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Hand")
                        .HasColumnType("float");

                    b.Property<double>("Hips")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<double>("Neck")
                        .HasColumnType("float");

                    b.Property<double>("R_S")
                        .HasColumnType("float");

                    b.Property<double>("Stomach")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Top");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Trouser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<double>("Bottom")
                        .HasColumnType("float");

                    b.Property<double>("Calf")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<double>("Sit")
                        .HasColumnType("float");

                    b.Property<double>("Thigh")
                        .HasColumnType("float");

                    b.Property<double>("Waist")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("Trouser");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Trousers", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Trousers");
                });

            modelBuilder.Entity("TDADomain.DataObjects.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TDADomain.DataObjects.WorkOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("DescriptionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Fin_Button")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("MC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Top")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Description", b =>
                {
                    b.HasOne("TDADomain.DataObjects.ChestPocket", "ChestPocket")
                        .WithMany()
                        .HasForeignKey("ChestPocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Cuffs", "Cuffs")
                        .WithMany()
                        .HasForeignKey("CuffsID");

                    b.HasOne("TDADomain.DataObjects.Embroidery", "Embroidery")
                        .WithMany()
                        .HasForeignKey("EmbroideryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Flap", "Flap")
                        .WithMany()
                        .HasForeignKey("FlapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Neck", "Neck")
                        .WithMany()
                        .HasForeignKey("NeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Sleeve", "Sleeve")
                        .WithMany()
                        .HasForeignKey("SleeveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Trousers", "Trousers")
                        .WithMany()
                        .HasForeignKey("TrousersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChestPocket");

                    b.Navigation("Cuffs");

                    b.Navigation("Embroidery");

                    b.Navigation("Flap");

                    b.Navigation("Neck");

                    b.Navigation("Sleeve");

                    b.Navigation("Style");

                    b.Navigation("Trousers");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Measurement", b =>
                {
                    b.HasOne("TDADomain.DataObjects.Agbada", "Agbada")
                        .WithMany()
                        .HasForeignKey("AgbadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Top", "Top")
                        .WithMany()
                        .HasForeignKey("TopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Trouser", "Trouser")
                        .WithMany()
                        .HasForeignKey("TrouserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agbada");

                    b.Navigation("Top");

                    b.Navigation("Trouser");
                });

            modelBuilder.Entity("TDADomain.DataObjects.WorkOrder", b =>
                {
                    b.HasOne("TDADomain.DataObjects.Customer", "Customer")
                        .WithMany("workOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TDADomain.DataObjects.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Description");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("TDADomain.DataObjects.Customer", b =>
                {
                    b.Navigation("workOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
